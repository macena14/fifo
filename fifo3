#include <zephyr/kernel.h>
#include <zephyr/sys/printk.h>

#define MY_STACK_SIZE 1024
#define MY_PRIORITY 0

K_FIFO_DEFINE(fifo);

struct fila {
    void *fifo_r; // define a FIFO
    int value;
};
//********************************* THREAD QUE ESCREVE****************/
void F1(void) {//Escreve

    struct fila dado;
while(1){
    for (int i = 0; i < 1; i++) {
        dado.value = i*5; // Define o valor a ser enviado
        printk("Escrito 1: %d\n", dado.value);
        k_fifo_put(&fifo, &dado); // Insere no FIFO
        k_msleep(1000); // Espera 1 s
    }}
}
//********************************* THREAD QUE ESCREVE****************/
// void F2(void) {//Escreve

//     struct fila dado;
// while(1){
//     for (int i = 0; i < 1; i++) {
//         dado.value = i*10; // Define o valor a ser enviado
//         printk("Escrito 2: %d\n", dado.value);
//         k_fifo_put(&fifo, &dado); // Insere no FIFO
//         k_msleep(1000); // Espera 1 s
//     }
// }}
//********************************* THREAD QUE LE ****************/	
void F3(void) {//Le

    struct fila *dado_r;

    while (1) {
        dado_r = k_fifo_get(&fifo, K_FOREVER); // Espera dados
        if (dado_r) {
            printk("Lido 1: %d\n", dado_r->value);
        }
		k_msleep(1000); // Espera 1 s
    }
}
//********************************* THREAD QUE LE ****************/	
void F4(void) {//Le

    struct fila *dado_r;

    while (1) {
        dado_r = k_fifo_get(&fifo, K_FOREVER); // Espera dados
        if (dado_r) {
            printk("Lido 2: %d\n", dado_r->value);
        }
		k_msleep(1000); // Espera 1 s
    }
}

K_THREAD_DEFINE(F1_id, MY_STACK_SIZE, F1, NULL, NULL, NULL, MY_PRIORITY, 0, 0);
//K_THREAD_DEFINE(F2_id, MY_STACK_SIZE, F2, NULL, NULL, NULL, MY_PRIORITY, 0, 0);
K_THREAD_DEFINE(F3_id, MY_STACK_SIZE, F3, NULL, NULL, NULL, MY_PRIORITY, 0, 0);
K_THREAD_DEFINE(F4_id, MY_STACK_SIZE, F4, NULL, NULL, NULL, MY_PRIORITY, 0, 0);
